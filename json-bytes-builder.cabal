name:
  json-bytes-builder
version:
  0.5
synopsis:
  Direct-to-bytes JSON Builder
description:
  An API for encoding of arbitrary data-structures into JSON byte-arrays,
  which is faster and simpler than \"aeson\".
  .
  Check out
  <http://hackage.haskell.org/package/json-bytes-builder-0.3/src/demo/Main.hs the demo>.
category:
  JSON, Codecs
homepage:
  https://github.com/nikita-volkov/json-bytes-builder
bug-reports:
  https://github.com/nikita-volkov/json-bytes-builder/issues 
author:
  Nikita Volkov <nikita.y.volkov@mail.ru>
maintainer:
  Nikita Volkov <nikita.y.volkov@mail.ru>
copyright:
  (c) 2016, Nikita Volkov
license:
  MIT
license-file:
  LICENSE
build-type:
  Simple
cabal-version:
  >=1.10


source-repository head
  type:
    git
  location:
    git://github.com/nikita-volkov/json-bytes-builder.git


library
  hs-source-dirs:
    library
  default-extensions:
    Arrows, BangPatterns, ConstraintKinds, DataKinds, DefaultSignatures, DeriveDataTypeable, DeriveFoldable, DeriveFunctor, DeriveGeneric, DeriveTraversable, EmptyDataDecls, FlexibleContexts, FlexibleInstances, FunctionalDependencies, GADTs, GeneralizedNewtypeDeriving, LambdaCase, LiberalTypeSynonyms, MagicHash, MultiParamTypeClasses, MultiWayIf, NoImplicitPrelude, NoMonomorphismRestriction, OverloadedStrings, PatternGuards, ParallelListComp, QuasiQuotes, RankNTypes, RecordWildCards, ScopedTypeVariables, StandaloneDeriving, TemplateHaskell, TupleSections, TypeFamilies, TypeOperators, UnboxedTuples
  default-language:
    Haskell2010
  other-modules:
    JSONBytesBuilder.Private.Prelude
    JSONBytesBuilder.Private.ByteString.BoundedPrim
    JSONBytesBuilder.Private.ByteString.Builder
    JSONBytesBuilder.Private.Builder
  exposed-modules:
    JSONBytesBuilder.Builder
    JSONBytesBuilder.ByteString.Builder
    JSONBytesBuilder.ByteString.ByteString
    JSONBytesBuilder.ByteString.LazyByteString
  build-depends:
    scientific == 0.3.*,
    text == 1.*,
    bytestring == 0.10.*,
    semigroups >= 0.16 && < 0.20,
    base-prelude < 2,
    base >= 4.7 && < 5


-- Well, it's not a benchmark actually, 
-- but Cabal provides no better way to specify an executable, 
-- which is not intended for distribution.
benchmark demo
  type: 
    exitcode-stdio-1.0
  hs-source-dirs:
    demo
  main-is:
    Main.hs
  default-extensions:
    Arrows, BangPatterns, ConstraintKinds, DataKinds, DefaultSignatures, DeriveDataTypeable, DeriveFoldable, DeriveFunctor, DeriveGeneric, DeriveTraversable, EmptyDataDecls, FlexibleContexts, FlexibleInstances, FunctionalDependencies, GADTs, GeneralizedNewtypeDeriving, LambdaCase, LiberalTypeSynonyms, MagicHash, MultiParamTypeClasses, MultiWayIf, NoImplicitPrelude, NoMonomorphismRestriction, OverloadedStrings, PatternGuards, ParallelListComp, QuasiQuotes, RankNTypes, RecordWildCards, ScopedTypeVariables, StandaloneDeriving, TemplateHaskell, TupleSections, TypeFamilies, TypeOperators, UnboxedTuples
  default-language:
    Haskell2010
  build-depends:
    json-bytes-builder,
    text,
    bytestring,
    base-prelude
